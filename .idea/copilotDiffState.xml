<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/com/krmu/Assignment1/Account.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/krmu/Assignment1/Account.java" />
              <option name="originalContent" value="package com.krmu.Assignment1;&#10;&#10;public class Account {&#10;    private int accountNumber;&#10;    private String accountHolderName;&#10;    private double balance;&#10;    private String email;&#10;    private String phoneNumber;&#10;&#10;    public Account(int accountNumber, String accountHolderName, double initialBalance, String email, String phoneNumber) {&#10;        this.accountNumber = accountNumber;&#10;        this.accountHolderName = accountHolderName != null ? accountHolderName.trim() : &quot;&quot;;&#10;        this.balance = Math.max(0, initialBalance);&#10;        this.email = email != null ? email.trim() : &quot;&quot;;&#10;        this.phoneNumber = phoneNumber != null ? phoneNumber.trim() : &quot;&quot;;&#10;    }&#10;&#10;    public int getAccountNumber() {&#10;        return accountNumber;&#10;    }&#10;&#10;    public String getAccountHolderName() {&#10;        return accountHolderName;&#10;    }&#10;&#10;    public double getBalance() {&#10;        return balance;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public String getPhoneNumber() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public boolean deposit(double amount) {&#10;        if (amount &lt;= 0) { System.out.println(&quot;Amount must be +ve&quot;); return false; }&#10;        balance += amount;&#10;        return true;&#10;    }&#10;&#10;    public boolean withdraw(double amount) {&#10;        if (amount &lt;= 0) { System.out.println(&quot;Amount must be +ve&quot;); return false; }&#10;        if (amount &gt; balance) { System.out.println(&quot;Not enough balance&quot;); return false; }&#10;        balance -= amount;&#10;        return true;&#10;    }&#10;&#10;    public void displayAccountDetails() {&#10;        System.out.println(&quot;Acc No: &quot; + accountNumber);&#10;        System.out.println(&quot;Name  : &quot; + accountHolderName);&#10;        System.out.println(&quot;Email : &quot; + email);&#10;        System.out.println(&quot;Phone : &quot; + phoneNumber);&#10;        System.out.println(&quot;Bal   : &quot; + balance);&#10;    }&#10;&#10;    public void updateContactDetails(String email, String phoneNumber) {&#10;        if (email != null) this.email = email.trim();&#10;        if (phoneNumber != null) this.phoneNumber = phoneNumber.trim();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.krmu.Assignment1;&#10;&#10;public class Account {&#10;    private int accountNumber;&#10;    private String accountHolderName;&#10;    private double balance;&#10;    private String email;&#10;    private String phoneNumber;&#10;&#10;    public Account(int accountNumber, String accountHolderName, double initialBalance, String email, String phoneNumber) {&#10;        this.accountNumber = accountNumber;&#10;        this.accountHolderName = accountHolderName != null ? accountHolderName.trim() : &quot;&quot;;&#10;        this.balance = Math.max(0, initialBalance);&#10;        this.email = email != null ? email.trim() : &quot;&quot;;&#10;        this.phoneNumber = phoneNumber != null ? phoneNumber.trim() : &quot;&quot;;&#10;    }&#10;&#10;    public int getAccountNumber() {&#10;        return accountNumber;&#10;    }&#10;&#10;    public boolean deposit(double amount) {&#10;        if (amount &lt;= 0) { System.out.println(&quot;Amount must be +ve&quot;); return false; }&#10;        balance += amount;&#10;        return true;&#10;    }&#10;&#10;    public boolean withdraw(double amount) {&#10;        if (amount &lt;= 0) { System.out.println(&quot;Amount must be +ve&quot;); return false; }&#10;        if (amount &gt; balance) { System.out.println(&quot;Not enough balance&quot;); return false; }&#10;        balance -= amount;&#10;        return true;&#10;    }&#10;&#10;    public void displayAccountDetails() {&#10;        System.out.println(&quot;Acc No: &quot; + accountNumber);&#10;        System.out.println(&quot;Name  : &quot; + accountHolderName);&#10;        System.out.println(&quot;Email : &quot; + email);&#10;        System.out.println(&quot;Phone : &quot; + phoneNumber);&#10;        System.out.println(&quot;Bal   : &quot; + balance);&#10;    }&#10;&#10;    public void updateContactDetails(String email, String phoneNumber) {&#10;        if (email != null) this.email = email.trim();&#10;        if (phoneNumber != null) this.phoneNumber = phoneNumber.trim();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/com/krmu/Assignment1/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/krmu/Assignment1/Main.java" />
              <option name="originalContent" value="package com.krmu.Assignment1;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        new UserInterface().mainMenu();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.krmu.Assignment1;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        UserInterface ui = new UserInterface();&#10;        Scanner sc = new Scanner(System.in);&#10;        int choice;&#10;        &#10;        do {&#10;            System.out.println(&quot;\n=== Banking Application ===&quot;);&#10;            System.out.println(&quot;1. Create Account&quot;);&#10;            System.out.println(&quot;2. Deposit Money&quot;);&#10;            System.out.println(&quot;3. Withdraw Money&quot;);&#10;            System.out.println(&quot;4. View Account Details&quot;);&#10;            System.out.println(&quot;5. Update Contact Details&quot;);&#10;            System.out.println(&quot;6. Exit&quot;);&#10;            System.out.print(&quot;Enter choice: &quot;);&#10;            &#10;            choice = sc.nextInt();&#10;            sc.nextLine();&#10;            &#10;            switch (choice) {&#10;                case 1:&#10;                    ui.create();&#10;                    break;&#10;                case 2:&#10;                    ui.deposit();&#10;                    break;&#10;                case 3:&#10;                    ui.withdraw();&#10;                    break;&#10;                case 4:&#10;                    ui.view();&#10;                    break;&#10;                case 5:&#10;                    ui.update();&#10;                    break;&#10;                case 6:&#10;                    System.out.println(&quot;Thank you for using Banking Application!&quot;);&#10;                    break;&#10;                default:&#10;                    System.out.println(&quot;Invalid choice! Please try again.&quot;);&#10;            }&#10;        } while (choice != 6);&#10;        &#10;        sc.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/com/krmu/Assignment1/UserInterface.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/krmu/Assignment1/UserInterface.java" />
              <option name="originalContent" value="package com.krmu.Assignment1;&#10;&#10;import java.util.Scanner;&#10;&#10;public class UserInterface {&#10;    private static final int MAX_ACCOUNTS = 100;&#10;&#10;    private Account[] accounts = new Account[MAX_ACCOUNTS];&#10;    private int accountCount = 0;&#10;    private Scanner sc = new Scanner(System.in);&#10;&#10;    // Find account index by account number&#10;    private int findAccountIndexByNumber(int accNo) {&#10;        for (int i = 0; i &lt; accountCount; i++) {&#10;            if (accounts[i].getAccountNumber() == accNo) {&#10;                return i;&#10;            }&#10;        }&#10;        return -1;&#10;    }&#10;&#10;    public void createAccount() {&#10;        if (accountCount &gt;= MAX_ACCOUNTS) {&#10;            System.out.println(&quot;Cannot create more accounts. Storage full.&quot;);&#10;            return;&#10;        }&#10;        try {&#10;            System.out.print(&quot;Enter account number (integer): &quot;);&#10;            int accNo = sc.nextInt();&#10;            sc.nextLine(); // consume newline&#10;&#10;            if (findAccountIndexByNumber(accNo) != -1) {&#10;                System.out.println(&quot;Account number already exists. Try again.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.print(&quot;Enter account holder name: &quot;);&#10;            String name = sc.nextLine().trim();&#10;&#10;            System.out.print(&quot;Enter initial balance: &quot;);&#10;            double initBal = sc.nextDouble();&#10;            sc.nextLine();&#10;&#10;            System.out.print(&quot;Enter email: &quot;);&#10;            String email = sc.nextLine().trim();&#10;&#10;            System.out.print(&quot;Enter phone number: &quot;);&#10;            String phone = sc.nextLine().trim();&#10;&#10;            accounts[accountCount] = new Account(accNo, name, initBal, email, phone);&#10;            accountCount++;&#10;            System.out.println(&quot;Account created successfully.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Invalid input. Please try again.&quot;);&#10;            sc.nextLine(); // clear buffer if needed&#10;        }&#10;    }&#10;&#10;    public void performDeposit() {&#10;        try {&#10;            System.out.print(&quot;Enter account number: &quot;);&#10;            int accNo = sc.nextInt();&#10;            sc.nextLine();&#10;&#10;            int idx = findAccountIndexByNumber(accNo);&#10;            if (idx == -1) {&#10;                System.out.println(&quot;Account not found.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.print(&quot;Enter amount to deposit: &quot;);&#10;            double amt = sc.nextDouble();&#10;            sc.nextLine();&#10;&#10;            accounts[idx].deposit(amt);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Invalid input. Please try again.&quot;);&#10;            sc.nextLine();&#10;        }&#10;    }&#10;&#10;    public void performWithdrawal() {&#10;        try {&#10;            System.out.print(&quot;Enter account number: &quot;);&#10;            int accNo = sc.nextInt();&#10;            sc.nextLine();&#10;&#10;            int idx = findAccountIndexByNumber(accNo);&#10;            if (idx == -1) {&#10;                System.out.println(&quot;Account not found.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.print(&quot;Enter amount to withdraw: &quot;);&#10;            double amt = sc.nextDouble();&#10;            sc.nextLine();&#10;&#10;            accounts[idx].withdraw(amt);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Invalid input. Please try again.&quot;);&#10;            sc.nextLine();&#10;        }&#10;    }&#10;&#10;    public void showAccountDetails() {&#10;        try {&#10;            System.out.print(&quot;Enter account number: &quot;);&#10;            int accNo = sc.nextInt();&#10;            sc.nextLine();&#10;&#10;            int idx = findAccountIndexByNumber(accNo);&#10;            if (idx == -1) {&#10;                System.out.println(&quot;Account not found.&quot;);&#10;                return;&#10;            }&#10;&#10;            accounts[idx].displayAccountDetails();&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Invalid input. Please try again.&quot;);&#10;            sc.nextLine();&#10;        }&#10;    }&#10;&#10;    public void updateContact() {&#10;        try {&#10;            System.out.print(&quot;Enter account number: &quot;);&#10;            int accNo = sc.nextInt();&#10;            sc.nextLine();&#10;&#10;            int idx = findAccountIndexByNumber(accNo);&#10;            if (idx == -1) {&#10;                System.out.println(&quot;Account not found.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.print(&quot;Enter new email: &quot;);&#10;            String email = sc.nextLine().trim();&#10;            System.out.print(&quot;Enter new phone number: &quot;);&#10;            String phone = sc.nextLine().trim();&#10;&#10;            accounts[idx].updateContactDetails(email, phone);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Invalid input. Please try again.&quot;);&#10;            sc.nextLine();&#10;        }&#10;    }&#10;&#10;    public void mainMenu() {&#10;        int choice = -1;&#10;        do {&#10;            System.out.println();&#10;            System.out.println(&quot;Welcome to the Banking Application!&quot;);&#10;            System.out.println(&quot;1. Create a new account&quot;);&#10;            System.out.println(&quot;2. Deposit money&quot;);&#10;            System.out.println(&quot;3. Withdraw money&quot;);&#10;            System.out.println(&quot;4. View account details&quot;);&#10;            System.out.println(&quot;5. Update contact details&quot;);&#10;            System.out.println(&quot;6. Exit&quot;);&#10;            System.out.print(&quot;Enter your choice: &quot;);&#10;&#10;            try {&#10;                choice = sc.nextInt();&#10;                sc.nextLine();&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;Please enter a valid number.&quot;);&#10;                sc.nextLine();&#10;                continue;&#10;            }&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    createAccount();&#10;                    break;&#10;                case 2:&#10;                    performDeposit();&#10;                    break;&#10;                case 3:&#10;                    performWithdrawal();&#10;                    break;&#10;                case 4:&#10;                    showAccountDetails();&#10;                    break;&#10;                case 5:&#10;                    updateContact();&#10;                    break;&#10;                case 6:&#10;                    System.out.println(&quot;Exiting... Thank you!&quot;);&#10;                    break;&#10;                default:&#10;                    System.out.println(&quot;Invalid choice. Try again.&quot;);&#10;            }&#10;        } while (choice != 6);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        UserInterface ui = new UserInterface();&#10;        ui.mainMenu();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.krmu.Assignment1;&#10;&#10;import java.util.Scanner;&#10;&#10;public class UserInterface {&#10;    private Account[] accounts = new Account[100];&#10;    private int count = 0;&#10;    private Scanner sc = new Scanner(System.in);&#10;&#10;    public void create() {&#10;        System.out.print(&quot;Acc no: &quot;);&#10;        int no = sc.nextInt(); sc.nextLine();&#10;        System.out.print(&quot;Name: &quot;);&#10;        String name = sc.nextLine();&#10;        System.out.print(&quot;Balance: &quot;);&#10;        double bal = sc.nextDouble(); sc.nextLine();&#10;        System.out.print(&quot;Email: &quot;);&#10;        String email = sc.nextLine();&#10;        System.out.print(&quot;Phone: &quot;);&#10;        String phone = sc.nextLine();&#10;        accounts[count++] = new Account(no, name, bal, email, phone);&#10;        System.out.println(&quot;Created!&quot;);&#10;    }&#10;&#10;    public void deposit() {&#10;        System.out.print(&quot;Acc no: &quot;);&#10;        int no = sc.nextInt(); sc.nextLine();&#10;        Account a = find(no);&#10;        if (a == null) { System.out.println(&quot;Not found&quot;); return; }&#10;        System.out.print(&quot;Amount: &quot;);&#10;        double amt = sc.nextDouble(); sc.nextLine();&#10;        a.deposit(amt);&#10;    }&#10;&#10;    public void withdraw() {&#10;        System.out.print(&quot;Acc no: &quot;);&#10;        int no = sc.nextInt(); sc.nextLine();&#10;        Account a = find(no);&#10;        if (a == null) { System.out.println(&quot;Not found&quot;); return; }&#10;        System.out.print(&quot;Amount: &quot;);&#10;        double amt = sc.nextDouble(); sc.nextLine();&#10;        a.withdraw(amt);&#10;    }&#10;&#10;    public void view() {&#10;        System.out.print(&quot;Acc no: &quot;);&#10;        int no = sc.nextInt(); sc.nextLine();&#10;        Account a = find(no);&#10;        if (a == null) { System.out.println(&quot;Not found&quot;); return; }&#10;        a.displayAccountDetails();&#10;    }&#10;&#10;    public void update() {&#10;        System.out.print(&quot;Acc no: &quot;);&#10;        int no = sc.nextInt(); sc.nextLine();&#10;        Account a = find(no);&#10;        if (a == null) { System.out.println(&quot;Not found&quot;); return; }&#10;        System.out.print(&quot;Email: &quot;);&#10;        String email = sc.nextLine();&#10;        System.out.print(&quot;Phone: &quot;);&#10;        String phone = sc.nextLine();&#10;        a.updateContactDetails(email, phone);&#10;    }&#10;&#10;    private Account find(int no) {&#10;        for (int i = 0; i &lt; count; i++) {&#10;            if (accounts[i].getAccountNumber() == no) return accounts[i];&#10;        }&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>